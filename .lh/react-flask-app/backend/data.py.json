{
    "sourceFile": "react-flask-app/backend/data.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1712436560224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712438653604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,13 @@\n         return []\n \n # Function to search for a keyword in post titles\n def search_posts(posts, keyword):\n-    matching_posts = [post for post in posts if keyword.lower() in post['title'].lower()]\n-    return matching_posts\n+    if posts[\"response\"][\"numFound\"] > 0:\n+        matching_posts = [post for post in posts if keyword.lower() in post['title'].lower()]\n+        return matching_posts\n \n+\n # Main function\n def main():\n     keyword = input(\"Enter a keyword to search for in post titles: \")\n     posts = fetch_posts()\n"
                },
                {
                    "date": 1712438740327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n def search_posts(posts, keyword):\n     if posts[\"response\"][\"numFound\"] > 0:\n         matching_posts = [post for post in posts if keyword.lower() in post['title'].lower()]\n         return matching_posts\n+    else: \n+        return False\n \n \n # Main function\n def main():\n"
                },
                {
                    "date": 1712439197566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,54 @@\n-\n-\n import requests\n \n-activity = ['hiking, swimming, running'] \n-trails = []\n-size = ['men', 'women']  \n-gender = ['xs', 's', 'm', 'l', 'xl']\n-\n- \n-\n # Function to fetch posts\n def fetch_posts():\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('YOUR_API_URL')\n     if response.status_code == 200:\n-        return response.json()\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n     else:\n         print(\"Failed to fetch posts\")\n         return []\n \n-# Function to search for a keyword in post titles\n-def search_posts(posts, keyword):\n-    if posts[\"response\"][\"numFound\"] > 0:\n-        matching_posts = [post for post in posts if keyword.lower() in post['title'].lower()]\n-        return matching_posts\n-    else: \n-        return False\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type):\n+    matching_products = []\n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n+            continue\n+        \n+        matching_products.append(product)\n+    \n+    return matching_products\n \n-\n # Main function\n def main():\n-    keyword = input(\"Enter a keyword to search for in post titles: \")\n-    posts = fetch_posts()\n-    matching_posts = search_posts(posts, keyword)\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n     \n-    if matching_posts:\n-        print(f\"Found {len(matching_posts)} posts with the keyword '{keyword}':\")\n-        for post in matching_posts:\n-            print(f\"- {post['title']}\")\n+    products = fetch_posts()\n+    matching_products = search_products(products, gender, color, product_type)\n+    \n+    if matching_products:\n+        print(f\"Found {len(matching_products)} products matching criteria:\")\n+        for product in matching_products:\n+            print(f\"- {product['title']}\")\n     else:\n-        print(f\"No posts found with the keyword '{keyword}'.\")\n+        print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1712439662584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+import requests\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type):\n+    matching_products = []\n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n+            continue\n+        \n+        matching_products.append(product)\n+    \n+    return matching_products\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    \n+    products = fetch_posts()\n+    matching_products = search_products(products, gender, color, product_type)\n+    \n+    if matching_products:\n+        print(f\"Found {len(matching_products)} products matching criteria:\")\n+        for product in matching_products:\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712440233680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n def main():\n     gender = input(\"Enter gender (men or women): \")\n     color = input(\"Enter color: \")\n     product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl)\") \n     \n     products = fetch_posts()\n     matching_products = search_products(products, gender, color, product_type)\n     \n@@ -51,58 +52,4 @@\n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n-import requests\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('YOUR_API_URL')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type):\n-    matching_products = []\n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n-            continue\n-        \n-        matching_products.append(product)\n-    \n-    return matching_products\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    \n-    products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type)\n-    \n-    if matching_products:\n-        print(f\"Found {len(matching_products)} products matching criteria:\")\n-        for product in matching_products:\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n"
                },
                {
                    "date": 1712440240619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n     size = input(\"Enter size(xs, s, m, l, xl)\") \n     \n     products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type)\n+    matching_products = search_products(products, gender, color, product_type, size)\n     \n     if matching_products:\n         print(f\"Found {len(matching_products)} products matching criteria:\")\n         for product in matching_products:\n"
                },
                {
                    "date": 1712440358950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         print(\"Failed to fetch posts\")\n         return []\n \n # Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type):\n+def search_products(products, gender, color, product_type, size):\n     matching_products = []\n     for product in products:\n         # Check if gender matches\n         if product['gender'].lower() != gender.lower():\n@@ -30,8 +30,14 @@\n         if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n             continue\n         \n         matching_products.append(product)\n+\n+        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n+        if not size_match:\n+            continue\n+\n+        \n     \n     return matching_products\n \n # Main function\n"
                },
                {
                    "date": 1712440394775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import requests\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type, size):\n+    matching_products = []\n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n+            continue\n+        \n+        matching_products.append(product)\n+\n+        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n+        if not size_match:\n+            continue\n+\n+        \n+    \n+    return matching_products\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl): \") \n+    \n+    products = fetch_posts()\n+    matching_products = search_products(products, gender, color, product_type, size)\n+    \n+    if matching_products:\n+        print(f\"Found {len(matching_products)} products matching criteria:\")\n+        for product in matching_products:\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712440620061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n         return []\n \n # Function to search for products by gender, color, and product type in title or description\n def search_products(products, gender, color, product_type, size):\n-    matching_products = []\n+    # matching_products = []\n+    matching_products_dict = {}  #\n     for product in products:\n         # Check if gender matches\n         if product['gender'].lower() != gender.lower():\n             continue\n@@ -35,8 +36,11 @@\n         size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n         if not size_match:\n             continue\n \n+        # Adding product to the dictionary using pid as key\n+        matching_products_dict[product['pid']] = product\n+\n         \n     \n     return matching_products\n \n@@ -58,65 +62,4 @@\n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n-import requests\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type, size):\n-    matching_products = []\n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n-            continue\n-        \n-        matching_products.append(product)\n-\n-        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n-        if not size_match:\n-            continue\n-\n-        \n-    \n-    return matching_products\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    size = input(\"Enter size(xs, s, m, l, xl)\") \n-    \n-    products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type, size)\n-    \n-    if matching_products:\n-        print(f\"Found {len(matching_products)} products matching criteria:\")\n-        for product in matching_products:\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n"
                },
                {
                    "date": 1712440790105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import requests\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type, size):\n+    # matching_products = []\n+    matching_products_dict = {}  #\n+    \n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n+            continue\n+        \n+        matching_products_dict.append(product)\n+\n+        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n+        if not size_match:\n+            continue\n+\n+        # Adding product to the dictionary using pid as key\n+        matching_products_dict[product['pid']] = product\n+\n+        \n+    \n+    return matching_products_dict\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl): \") \n+    \n+    products = fetch_posts()\n+    matching_products = search_products(products, gender, color, product_type, size)\n+    \n+    if matching_products:\n+        print(f\"Found {len(matching_products)} products matching criteria:\")\n+        for product in matching_products:\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712440862123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import requests\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type, size):\n+    # matching_products = []\n+    matching_products_dict = {}  #\n+    \n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        product_type_match = product_type.lower() in product['title'].lower() or product_type.lower() in product['description'].lower()\n+        if not product_type_match:\n+            continue\n+        \n+        # Assuming size information can be derived from description or another field\n+        size_match = size.lower() in product['description'].lower()  # This condition depends on actual data structure\n+        if not size_match:\n+            continue\n+        \n+        # Adding product to the dictionary using pid as key\n+        matching_products_dict[product['pid']] = product\n+\n+        \n+    \n+    return matching_products_dict\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl): \") \n+    \n+    products = fetch_posts()\n+    matching_products = search_products(products, gender, color, product_type, size)\n+    \n+    if matching_products:\n+        print(f\"Found {len(matching_products)} products matching criteria:\")\n+        for product in matching_products:\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712440924862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,146 +52,15 @@\n     product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n     size = input(\"Enter size(xs, s, m, l, xl): \") \n     \n     products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type, size)\n+    matching_products_dict = search_products(products, gender, color, product_type, size)\n     \n-    if matching_products:\n-        print(f\"Found {len(matching_products)} products matching criteria:\")\n-        for product in matching_products:\n+    if matching_products_dict:\n+        print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n+         for pid, product in matching_products_dict.items():\n             print(f\"- {product['title']}\")\n     else:\n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n-import requests\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type, size):\n-    # matching_products = []\n-    matching_products_dict = {}  #\n-    \n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n-            continue\n-        \n-        matching_products_dict.append(product)\n-\n-        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n-        if not size_match:\n-            continue\n-\n-        # Adding product to the dictionary using pid as key\n-        matching_products_dict[product['pid']] = product\n-\n-        \n-    \n-    return matching_products_dict\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    size = input(\"Enter size(xs, s, m, l, xl): \") \n-    \n-    products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type, size)\n-    \n-    if matching_products:\n-        print(f\"Found {len(matching_products)} products matching criteria:\")\n-        for product in matching_products:\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n-import requests\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type, size):\n-    # matching_products = []\n-    matching_products_dict = {}  #\n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        if product_type.lower() not in product['title'].lower() and product_type.lower() not in product['description'].lower():\n-            continue\n-        \n-        matching_products.append(product)\n-\n-        size_match = size.lower() in product['description'].lower()  # This line is illustrative and depends on actual data structure\n-        if not size_match:\n-            continue\n-\n-        # Adding product to the dictionary using pid as key\n-        matching_products_dict[product['pid']] = product\n-\n-        \n-    \n-    return matching_products\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    size = input(\"Enter size(xs, s, m, l, xl): \") \n-    \n-    products = fetch_posts()\n-    matching_products = search_products(products, gender, color, product_type, size)\n-    \n-    if matching_products:\n-        print(f\"Found {len(matching_products)} products matching criteria:\")\n-        for product in matching_products:\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n"
                },
                {
                    "date": 1712440934502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     matching_products_dict = search_products(products, gender, color, product_type, size)\n     \n     if matching_products_dict:\n         print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n-         for pid, product in matching_products_dict.items():\n+        for pid, product in matching_products_dict.items():\n             print(f\"- {product['title']}\")\n     else:\n         print(\"No products found matching criteria.\")\n \n"
                },
                {
                    "date": 1712441217153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+import requests\n+from flask import Flask, jsonify\n+\n+app = Flask(__name__)\n+\n+@app.route('/api/products', methods=['GET'])\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type, size):\n+    # matching_products = []\n+    matching_products_dict = {}  #\n+    \n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        product_type_match = product_type.lower() in product['title'].lower() or product_type.lower() in product['description'].lower()\n+        if not product_type_match:\n+            continue\n+        \n+        # Assuming size information can be derived from description or another field\n+        size_match = size.lower() in product['description'].lower()  # This condition depends on actual data structure\n+        if not size_match:\n+            continue\n+        \n+        # Adding product to the dictionary using pid as key\n+        matching_products_dict[product['pid']] = product\n+\n+        \n+    \n+    return matching_products_dict\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl): \") \n+    \n+    products = fetch_posts()\n+    matching_products_dict = search_products(products, gender, color, product_type, size)\n+    \n+    if matching_products_dict:\n+        print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n+        for pid, product in matching_products_dict.items():\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712441308842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+import requests\n+from flask import Flask, jsonify\n+\n+app = Flask(__name__)\n+\n+@app.route('/api/products', methods=['GET'])\n+\n+# Function to fetch posts\n+def fetch_posts():\n+    # Replace YOUR_API_URL with the actual URL of the API\n+    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n+    if response.status_code == 200:\n+        data = response.json()\n+        # Correctly navigating to the 'docs' based on the provided JSON structure\n+        posts = data['response']['docs']\n+        return posts\n+    else:\n+        print(\"Failed to fetch posts\")\n+        return []\n+\n+# Function to search for products by gender, color, and product type in title or description\n+def search_products(products, gender, color, product_type, size):\n+    # matching_products = []\n+    matching_products_dict = {}  #\n+    \n+    for product in products:\n+        # Check if gender matches\n+        if product['gender'].lower() != gender.lower():\n+            continue\n+        \n+        # Check if color is present in 'colour_images_map_ca'\n+        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n+        if not color_present:\n+            continue\n+        \n+        # Check if product type is mentioned in title or description\n+        product_type_match = product_type.lower() in product['title'].lower() or product_type.lower() in product['description'].lower()\n+        if not product_type_match:\n+            continue\n+        \n+        # Assuming size information can be derived from description or another field\n+        size_match = size.lower() in product['description'].lower()  # This condition depends on actual data structure\n+        if not size_match:\n+            continue\n+        \n+        # Adding product to the dictionary using pid as key\n+        matching_products_dict[product['pid']] = product\n+\n+        \n+    \n+    return matching_products_dict\n+\n+# Main function\n+def main():\n+    gender = input(\"Enter gender (men or women): \")\n+    color = input(\"Enter color: \")\n+    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n+    size = input(\"Enter size(xs, s, m, l, xl): \") \n+    \n+    products = fetch_posts()\n+    matching_products_dict = search_products(products, gender, color, product_type, size)\n+    \n+    if matching_products_dict:\n+        return jsonify(matching_products_dict)\n+        print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n+        for pid, product in matching_products_dict.items():\n+            print(f\"- {product['title']}\")\n+    else:\n+        print(\"No products found matching criteria.\")\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1712441338850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,145 +65,9 @@\n         print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n         for pid, product in matching_products_dict.items():\n             print(f\"- {product['title']}\")\n     else:\n+        return jsonify({matching_products_dict}) \n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n-import requests\n-from flask import Flask, jsonify\n-\n-app = Flask(__name__)\n-\n-@app.route('/api/products', methods=['GET'])\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type, size):\n-    # matching_products = []\n-    matching_products_dict = {}  #\n-    \n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        product_type_match = product_type.lower() in product['title'].lower() or product_type.lower() in product['description'].lower()\n-        if not product_type_match:\n-            continue\n-        \n-        # Assuming size information can be derived from description or another field\n-        size_match = size.lower() in product['description'].lower()  # This condition depends on actual data structure\n-        if not size_match:\n-            continue\n-        \n-        # Adding product to the dictionary using pid as key\n-        matching_products_dict[product['pid']] = product\n-\n-        \n-    \n-    return matching_products_dict\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    size = input(\"Enter size(xs, s, m, l, xl): \") \n-    \n-    products = fetch_posts()\n-    matching_products_dict = search_products(products, gender, color, product_type, size)\n-    \n-    if matching_products_dict:\n-        print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n-        for pid, product in matching_products_dict.items():\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n-import requests\n-\n-# Function to fetch posts\n-def fetch_posts():\n-    # Replace YOUR_API_URL with the actual URL of the API\n-    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n-    if response.status_code == 200:\n-        data = response.json()\n-        # Correctly navigating to the 'docs' based on the provided JSON structure\n-        posts = data['response']['docs']\n-        return posts\n-    else:\n-        print(\"Failed to fetch posts\")\n-        return []\n-\n-# Function to search for products by gender, color, and product type in title or description\n-def search_products(products, gender, color, product_type, size):\n-    # matching_products = []\n-    matching_products_dict = {}  #\n-    \n-    for product in products:\n-        # Check if gender matches\n-        if product['gender'].lower() != gender.lower():\n-            continue\n-        \n-        # Check if color is present in 'colour_images_map_ca'\n-        color_present = any(color.lower() in color_info.split(\":::\")[0].lower() for color_info in product['colour_images_map_ca'])\n-        if not color_present:\n-            continue\n-        \n-        # Check if product type is mentioned in title or description\n-        product_type_match = product_type.lower() in product['title'].lower() or product_type.lower() in product['description'].lower()\n-        if not product_type_match:\n-            continue\n-        \n-        # Assuming size information can be derived from description or another field\n-        size_match = size.lower() in product['description'].lower()  # This condition depends on actual data structure\n-        if not size_match:\n-            continue\n-        \n-        # Adding product to the dictionary using pid as key\n-        matching_products_dict[product['pid']] = product\n-\n-        \n-    \n-    return matching_products_dict\n-\n-# Main function\n-def main():\n-    gender = input(\"Enter gender (men or women): \")\n-    color = input(\"Enter color: \")\n-    product_type = input(\"Enter product type (e.g., shoes, jacket): \")\n-    size = input(\"Enter size(xs, s, m, l, xl): \") \n-    \n-    products = fetch_posts()\n-    matching_products_dict = search_products(products, gender, color, product_type, size)\n-    \n-    if matching_products_dict:\n-        print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n-        for pid, product in matching_products_dict.items():\n-            print(f\"- {product['title']}\")\n-    else:\n-        print(\"No products found matching criteria.\")\n-\n-if __name__ == \"__main__\":\n-    main()\n"
                },
                {
                    "date": 1712442480594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n         for pid, product in matching_products_dict.items():\n             print(f\"- {product['title']}\")\n     else:\n-        return jsonify({matching_products_dict}) \n+        return jsonify(matching_products_dict) \n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1712442551489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         print(f\"Found {len(matching_products_dict)} products matching criteria:\")\n         for pid, product in matching_products_dict.items():\n             print(f\"- {product['title']}\")\n     else:\n-        return jsonify(matching_products_dict) \n+        return jsonify(products=matching_products_dict) \n         print(\"No products found matching criteria.\")\n \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1712443405626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import requests\n from flask import Flask, jsonify\n \n-app = Flask(__name__)\n+# app = Flask(__name__)\n \n-@app.route('/api/products', methods=['GET'])\n+# @app.route('/api/products', methods=['GET'])\n \n # Function to fetch posts\n def fetch_posts():\n     # Replace YOUR_API_URL with the actual URL of the API\n"
                }
            ],
            "date": 1712436560224,
            "name": "Commit-0",
            "content": "\n\nimport requests\n\nactivity = ['hiking, swimming, running'] \ntrails = []\nsize = ['men', 'women']  \ngender = ['xs', 's', 'm', 'l', 'xl']\n\n \n\n# Function to fetch posts\ndef fetch_posts():\n    response = requests.get('https://core.dxpapi.com/api/v1/core/?account_id=7358&domain_key=arcteryx&fl=analytics_name%2Ccollection%2Ccolour_images_map%2Ccolour_images_map_ca%2Cdescription%2Cdiscount_price_ca%2Cgender%2Chover_image%2Cis_new%2Cis_pro%2Cis_revised%2Cprice_ca%2Cpid%2Creview_count%2Crating%2Cslug%2Ctitle%2Cthumb_image&efq=genders%3A%28%22men%22%29&_br_uid_2=uid%3D8986126272758%3Av%3D15.0%3Ats%3D1709256759599%3Ahc%3D469&ref_url=https%3A%2F%2Farcteryx.com%2Fca%2Fen&url=https%3A%2F%2Farcteryx.com%2Fca%2Fen%2Fc%2Fmens%2Fshell-jackets&request_id=5483043020827&rows=200&start=0&view_id=ca&request_type=search&search_type=category&q=shell-jackets-men')\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Failed to fetch posts\")\n        return []\n\n# Function to search for a keyword in post titles\ndef search_posts(posts, keyword):\n    matching_posts = [post for post in posts if keyword.lower() in post['title'].lower()]\n    return matching_posts\n\n# Main function\ndef main():\n    keyword = input(\"Enter a keyword to search for in post titles: \")\n    posts = fetch_posts()\n    matching_posts = search_posts(posts, keyword)\n    \n    if matching_posts:\n        print(f\"Found {len(matching_posts)} posts with the keyword '{keyword}':\")\n        for post in matching_posts:\n            print(f\"- {post['title']}\")\n    else:\n        print(f\"No posts found with the keyword '{keyword}'.\")\n\nif __name__ == \"__main__\":\n    main()\n"
        }
    ]
}